name: Update Interactive README

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to get all files for the directory tree

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate and Commit README
        env:
          REPO_URL: "https://github.com/${{ github.repository }}/blob/main"
          GH_TOKEN: ${{ secrets.GH_PAT }} # Assuming you have a Personal Access Token
        run: |
          # Generate the dynamic directory tree
          DIR_TREE_CONTENT=$(node -e '
            const fs = require("fs");
            const path = require("path");

            const repoUrl = process.env.REPO_URL;
            const ignoreList = [".git", ".github", "node_modules", "README.md", ".gitignore", "LICENSE"]; // Added LICENSE as common
            const maxPreviewSize = 15000; // Max file size in bytes for preview
            const maxPreviewLines = 7;

            function getLanguage(filename) {
              const ext = path.extname(filename).toLowerCase();
              const langMap = { ".js": "javascript", ".py": "python", ".java": "java", ".cpp": "cpp", ".c": "c", ".md": "markdown", ".json": "json", ".html": "html", ".css": "css", ".sh": "shell" };
              return langMap[ext] || "";
            }

            function getFileIcon(filename) {
              const ext = path.extname(filename).toLowerCase();
              const icons = { ".js": "üìú", ".py": "üêç", ".java": "‚òï", ".cpp": "‚öôÔ∏è", ".c": "üîß", ".md": "üìù", ".json": "üì¶", ".html": "üåê", ".css": "üé®", ".sh": "‚ùØ" };
              return icons[ext] || "üìÑ";
            }

            function getCodePreview(filePath) {
              try {
                if (fs.statSync(filePath).isDirectory() || fs.statSync(filePath).size > maxPreviewSize) return "";
                const content = fs.readFileSync(filePath, "utf8");
                const lines = content.split("\n");
                if (lines.length <= maxPreviewLines) return content;
                return lines.slice(0, maxPreviewLines).join("\n") + "\n...";
              } catch (err) {
                // console.error(`Error reading file ${filePath} for preview:`, err.message);
                return ""; // Keep it silent in the action
              }
            }

            function createTreeMarkdown(dir, prefix = "", level = 0) {
              let result = "";
              const items = fs.readdirSync(dir)
                .filter(item => !ignoreList.includes(item))
                .sort((a, b) => {
                  const aIsDir = fs.statSync(path.join(dir, a)).isDirectory();
                  const bIsDir = fs.statSync(path.join(dir, b)).isDirectory();
                  return aIsDir === bIsDir ? a.localeCompare(b) : (aIsDir ? -1 : 1);
                });

              for (const item of items) {
                const itemPath = path.join(dir, item);
                const relativePath = path.relative(".", itemPath).replace(/\\/g, "/");
                const isDir = fs.statSync(itemPath).isDirectory();

                if (isDir) {
                  const dirItemCount = fs.readdirSync(itemPath).filter(i => !ignoreList.includes(i)).length;
                  if (dirItemCount === 0 && level > 0) { // Optionally hide empty sub-dirs or style them differently
                     // result += `${prefix}<div><span class="dir-icon">üìÅ</span> ${item} <span class="empty-dir-text">(empty)</span></div>\n`;
                     continue; // Skip empty directories for a cleaner look, or style as above
                  }
                  result += `${prefix}<details${level < 1 ? " open" : ""} class="dir-details">\n`; // Open first few levels
                  result += `${prefix}  <summary><span class="dir-icon">üìÅ</span> <strong>${item}</strong> (${dirItemCount} items)</summary>\n`;
                  result += `${prefix}  <div class="dir-content">\n`;
                  result += createTreeMarkdown(itemPath, prefix + "    ", level + 1);
                  result += `${prefix}  </div>\n`;
                  result += `${prefix}</details>\n\n`;
                } else {
                  const fileIcon = getFileIcon(item);
                  const fileSize = (fs.statSync(itemPath).size / 1024).toFixed(1);
                  const gitHubLink = `${repoUrl}/${relativePath}`;
                  const language = getLanguage(item);
                  const preview = getCodePreview(itemPath);

                  result += `${prefix}<div class="file-item">\n`;
                  result += `${prefix}  <span class="file-icon">${fileIcon}</span> `;
                  result += `<a href="${gitHubLink}" target="_blank">${item}</a> <span class="file-meta">(${fileSize} KB)</span>\n`;
                  if (preview && language) {
                    result += `${prefix}  <details class="preview-details">\n`;
                    result += `${prefix}    <summary>üëÄ Preview</summary>\n`;
                    result += `${prefix}    <pre><code class="language-${language}">${preview.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</code></pre>\n`; // Basic HTML escaping for preview
                    result += `${prefix}  </details>\n`;
                  }
                  result += `${prefix}</div>\n\n`;
                }
              }
              return result || (level === 0 ? `${prefix}<div>Looks like this directory is empty or all items are ignored!</div>\n\n` : "");
            }
            console.log(createTreeMarkdown("."));
          ')

          # Create README.md
          cat > README.md << EOL
          <div align="center">

          # üöÄ ${{ github.repository_owner }}/${{ github.event.repository.name }}

          [![Last Commit](https://img.shields.io/github/last-commit/${{ github.repository }}?style=flat-square&logo=github&logoColor=white)](https://github.com/${{ github.repository }}/commits/main)
          [![Repo Size](https://img.shields.io/github/repo-size/${{ github.repository }}?style=flat-square&logo=github&logoColor=white)](https://github.com/${{ github.repository }})
          [![Stars](https://img.shields.io/github/stars/${{ github.repository }}?style=flat-square&logo=github&logoColor=white&label=Stars)](https://github.com/${{ github.repository }}/stargazers)
          [![Forks](https://img.shields.io/github/forks/${{ github.repository }}?style=flat-square&logo=github&logoColor=white&label=Forks)](https://github.com/${{ github.repository }}/network/members)

          </div>

          <p align="center">
            A collection of Data Structures, Algorithms, and Competitive Programming solutions.
            <br />
            <em>Navigate the codebase interactively below!</em>
          </p>

          ---

          ## üå≥ Directory Explorer

          <details open class="repo-explorer-details">
          <summary><b>üóÇÔ∏è Click to explore project files</b></summary>
          <div id="directory-explorer-content">

          ${DIR_TREE_CONTENT}

          </div>
          </details>

          ---

          ## ‚ú® Features

          - **Interactive Navigation**: Expand/collapse directories.
          - **Direct File Access**: Click file names to view them on GitHub.
          - **Code Snippets**: Quick previews for many file types.
          - **Auto-Updating**: README is regenerated on every push to \`main\`.

          ---

          <div align="center">
            <p>Generated on $(date '+%B %d, %Y at %H:%M:%S %Z')</p>
            <p>‚≠ê Found this useful? Star the repo! ‚≠ê</p>
          </div>

          <style>
            #directory-explorer-content {
              background-color: #f9f9f9; /* Lighter background */
              border: 1px solid #ddd; /* Softer border */
              border-radius: 8px;
              padding: 15px;
              margin-top: 10px;
              max-height: 70vh;
              overflow-y: auto;
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
              line-height: 1.6;
            }
            .repo-explorer-details summary {
              cursor: pointer;
              padding: 8px 12px;
              background-color: #f1f1f1;
              border-radius: 5px;
              transition: background-color 0.2s ease;
            }
            .repo-explorer-details summary:hover {
              background-color: #e7e7e7;
            }
            .dir-details summary, .preview-details summary {
              cursor: pointer;
              font-weight: normal;
              padding: 4px 0;
              display: flex;
              align-items: center;
            }
            .dir-details summary strong {
              font-weight: 600; /* Bolder directory names */
            }
            .dir-icon, .file-icon {
              margin-right: 10px;
              font-size: 1.1em;
            }
            .dir-content {
              margin-left: 25px; /* Consistent indentation */
              padding-left: 15px;
              border-left: 2px dotted #ccc; /* Dotted line for structure */
            }
            .file-item {
              margin: 8px 0 8px 0px; /* Slightly more spacing, no extra left margin */
              display: flex;
              align-items: center;
              flex-wrap: wrap; /* Allow wrapping for smaller screens */
            }
            .file-meta {
              font-size: 0.85em;
              color: #555;
              margin-left: 8px;
            }
            a {
              color: #007bff; /* Standard link blue */
              text-decoration: none;
            }
            a:hover {
              text-decoration: underline;
              color: #0056b3;
            }
            .preview-details {
              margin-left: 35px; /* Indent preview under file */
              margin-top: 5px;
              width: calc(100% - 35px); /* Ensure preview doesn't overflow too much */
            }
            .preview-details summary {
              font-size: 0.9em;
              color: #333;
            }
            .preview-details pre {
              background-color: #fff;
              border: 1px solid #ddd;
              border-radius: 5px;
              padding: 10px;
              overflow-x: auto;
              font-size: 0.85em; /* Smaller font for code */
              margin-top: 5px;
              max-height: 200px; /* Max height for preview */
            }
            .preview-details code {
              font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
            }
            .empty-dir-text {
              color: #777;
              font-style: italic;
              font-size: 0.9em;
            }
            /* Dark mode considerations (optional, GitHub handles some inversion) */
            @media (prefers-color-scheme: dark) {
              #directory-explorer-content {
                background-color: #2d333b; /* Darker background */
                border-color: #444c56;
              }
              .repo-explorer-details summary {
                background-color: #373e47;
              }
              .repo-explorer-details summary:hover {
                background-color: #444c56;
              }
              .dir-content { border-left-color: #586069; }
              .file-meta { color: #adbac7; }
              a { color: #58a6ff; }
              a:hover { color: #79c0ff; }
              .preview-details summary { color: #c9d1d9; }
              .preview-details pre { background-color: #22272e; border-color: #444c56; }
              .empty-dir-text { color: #8b949e; }
            }
          </style>
          EOL

          # Commit and push
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          # No need to set remote URL if using GITHUB_TOKEN with actions/checkout@v4 default token
          # However, if using a PAT (like GH_PAT), it's good practice or required if default token permissions are insufficient.
          # If your repo is public and the default GITHUB_TOKEN has content write permissions, you might not need the GH_PAT for this.
          # For private repos or if specific PAT permissions are needed:
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}"

          if ! git diff --quiet README.md; then
            echo "README.md changed. Committing and pushing..."
            git add README.md
            git commit -m "ü§ñ Chore: Auto-update interactive README" -m "Generated on $(date)"
            git push origin main
          else
            echo "No changes to README.md. Nothing to commit."
          fi
